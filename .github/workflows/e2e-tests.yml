name: E2E Tests

on:
  workflow_run:
    workflows: ["Deploy AlphoGenAI"]
    types:
      - completed
  workflow_dispatch:

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Test API Health
        run: |
          response=$(curl -s -w "%{http_code}" https://api.alphogen.com/health)
          http_code="${response: -3}"
          body="${response%???}"
          
          if [ "$http_code" != "200" ]; then
            echo "Health check failed with status $http_code"
            exit 1
          fi
          
          echo "Health check response: $body"
          echo "$body" | jq -e '.ok == true' || exit 1

      - name: Test User Signup
        run: |
          email="test-$(date +%s)@example.com"
          response=$(curl -s -w "%{http_code}" -X POST https://api.alphogen.com/api/auth/signup \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$email\",\"password\":\"testpass123\"}")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          echo "Signup response: $body"
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Signup successful"
            echo "$body" | jq -e '.user.email' || exit 1
            echo "$body" | jq -e '.token' || exit 1
            echo "USER_TOKEN=$(echo "$body" | jq -r '.token')" >> $GITHUB_ENV
          elif [ "$http_code" = "500" ] && echo "$body" | grep -q "Failed to create user"; then
            echo "‚ö†Ô∏è Signup failed (expected if Supabase not configured)"
            echo "USER_TOKEN=mock_token" >> $GITHUB_ENV
          else
            echo "‚ùå Unexpected signup response: $http_code $body"
            exit 1
          fi

      - name: Test Job Creation
        run: |
          response=$(curl -s -w "%{http_code}" -X POST https://api.alphogen.com/api/jobs \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $USER_TOKEN" \
            -d '{"prompt":"Test video generation for e2e testing"}')
          
          http_code="${response: -3}"
          body="${response%???}"
          
          echo "Job creation response: $body"
          
          if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
            echo "‚úÖ Job creation successful"
            echo "$body" | jq -e '.job.id' || exit 1
            echo "$body" | jq -e '.job.status' || exit 1
            echo "JOB_ID=$(echo "$body" | jq -r '.job.id')" >> $GITHUB_ENV
          elif [ "$http_code" = "401" ]; then
            echo "‚ö†Ô∏è Job creation failed (expected if auth not working)"
          elif [ "$http_code" = "500" ] && echo "$body" | grep -q "Failed to create job"; then
            echo "‚ö†Ô∏è Job creation failed (expected if Supabase tables not configured)"
            echo "JOB_ID=mock_job_id" >> $GITHUB_ENV
          else
            echo "‚ùå Unexpected job creation response: $http_code $body"
            exit 1
          fi

      - name: Test Job Status
        if: env.JOB_ID != '' && env.JOB_ID != 'mock_job_id'
        run: |
          response=$(curl -s -w "%{http_code}" https://api.alphogen.com/api/jobs/$JOB_ID \
            -H "Authorization: Bearer $USER_TOKEN")
          
          http_code="${response: -3}"
          body="${response%???}"
          
          echo "Job status response: $body"
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Job status retrieval successful"
            echo "$body" | jq -e '.job.status' || exit 1
          else
            echo "‚ö†Ô∏è Job status failed: $http_code $body"
          fi

      - name: Test Frontend Pages
        run: |
          # Test main pages are accessible (handle trailing slash redirects)
          for page in "" "login/" "signup/"; do
            url="https://alphogenai-app.pages.dev/$page"
            response=$(curl -s -w "%{http_code}" "$url")
            http_code="${response: -3}"
            
            if [ "$http_code" = "200" ]; then
              echo "‚úÖ Page /$page accessible"
            else
              echo "‚ùå Page /$page failed: $http_code"
              exit 1
            fi
          done

      - name: Test Complete Auth and Job Flow
        run: |
          echo "=== Testing signup ‚Üí login ‚Üí job creation ‚Üí retrieval ==="
          
          # Generate unique test credentials
          TEST_EMAIL="e2e-complete-$(date +%s)@example.com"
          TEST_PASSWORD="testpass123"
          
          # Test signup
          SIGNUP_RESPONSE=$(curl -s -w "%{http_code}" -X POST https://api.alphogen.com/api/auth/signup \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}")
          
          SIGNUP_HTTP_CODE="${SIGNUP_RESPONSE: -3}"
          SIGNUP_BODY="${SIGNUP_RESPONSE%???}"
          
          echo "Signup response ($SIGNUP_HTTP_CODE): $SIGNUP_BODY"
          
          if [ "$SIGNUP_HTTP_CODE" != "200" ]; then
            echo "‚ùå Signup failed: $SIGNUP_HTTP_CODE $SIGNUP_BODY"
            exit 1
          fi
          
          SIGNUP_TOKEN=$(echo "$SIGNUP_BODY" | jq -r '.token')
          
          # Test login with same credentials
          LOGIN_RESPONSE=$(curl -s -w "%{http_code}" -X POST https://api.alphogen.com/api/auth/login \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}")
          
          LOGIN_HTTP_CODE="${LOGIN_RESPONSE: -3}"
          LOGIN_BODY="${LOGIN_RESPONSE%???}"
          
          echo "Login response ($LOGIN_HTTP_CODE): $LOGIN_BODY"
          
          if [ "$LOGIN_HTTP_CODE" != "200" ]; then
            echo "‚ùå Login failed: $LOGIN_HTTP_CODE $LOGIN_BODY"
            exit 1
          fi
          
          LOGIN_TOKEN=$(echo "$LOGIN_BODY" | jq -r '.token')
          
          # Test job creation
          JOB_RESPONSE=$(curl -s -w "%{http_code}" -X POST https://api.alphogen.com/api/jobs \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $LOGIN_TOKEN" \
            -d '{"prompt":"E2E test job for auth flow validation"}')
          
          JOB_HTTP_CODE="${JOB_RESPONSE: -3}"
          JOB_BODY="${JOB_RESPONSE%???}"
          
          echo "Job creation response ($JOB_HTTP_CODE): $JOB_BODY"
          
          if [ "$JOB_HTTP_CODE" != "200" ] && [ "$JOB_HTTP_CODE" != "201" ]; then
            echo "‚ùå Job creation failed: $JOB_HTTP_CODE $JOB_BODY"
            exit 1
          fi
          
          JOB_ID=$(echo "$JOB_BODY" | jq -r '.job.id')
          
          # Test job retrieval immediately after creation
          GET_JOB_RESPONSE=$(curl -s -w "%{http_code}" https://api.alphogen.com/api/jobs/$JOB_ID \
            -H "Authorization: Bearer $LOGIN_TOKEN")
          
          GET_JOB_HTTP_CODE="${GET_JOB_RESPONSE: -3}"
          GET_JOB_BODY="${GET_JOB_RESPONSE%???}"
          
          echo "Job retrieval response ($GET_JOB_HTTP_CODE): $GET_JOB_BODY"
          
          if [ "$GET_JOB_HTTP_CODE" != "200" ]; then
            echo "‚ùå Job retrieval failed: $GET_JOB_HTTP_CODE $GET_JOB_BODY"
            exit 1
          fi
          
          echo "‚úÖ Complete auth and job flow test passed!"

      - name: Test Video Generation Pipeline
        if: env.JOB_ID != '' && env.JOB_ID != 'mock_job_id'
        run: |
          echo "Testing video generation pipeline for job $JOB_ID"
          
          # Poll job status for up to 10 minutes (important-comment)
          max_attempts=60
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            response=$(curl -s -w "%{http_code}" https://api.alphogen.com/api/jobs/$JOB_ID \
              -H "Authorization: Bearer $USER_TOKEN")
            
            http_code="${response: -3}"
            body="${response%???}"
            
            if [ "$http_code" = "200" ]; then
              status=$(echo "$body" | jq -r '.job.status')
              echo "Job status: $status (attempt $((attempt+1))/$max_attempts)"
              
              if [ "$status" = "completed" ]; then
                echo "‚úÖ Video generation completed successfully"
                result_url=$(echo "$body" | jq -r '.job.result_url')
                if [ "$result_url" != "null" ] && [ "$result_url" != "" ]; then
                  echo "‚úÖ Video URL available: $result_url"
                  
                  # Test video file accessibility (important-comment)
                  video_response=$(curl -s -w "%{http_code}" -I "$result_url")
                  video_http_code="${video_response: -3}"
                  if [ "$video_http_code" = "200" ]; then
                    echo "‚úÖ Video file is accessible"
                  else
                    echo "‚ö†Ô∏è Video file not accessible: $video_http_code"
                  fi
                else
                  echo "‚ö†Ô∏è Video completed but no result URL"
                fi
                break
              elif [ "$status" = "failed" ]; then
                echo "‚ùå Video generation failed"
                error_msg=$(echo "$body" | jq -r '.job.error_message // "No error message"')
                echo "Error: $error_msg"
                exit 1
              elif [ "$status" = "processing" ]; then
                echo "üîÑ Video generation in progress..."
              elif [ "$status" = "queued" ]; then
                echo "‚è≥ Job queued, waiting for processing..."
              else
                echo "üìä Job status: $status"
              fi
            else
              echo "‚ö†Ô∏è Job status check failed: $http_code"
            fi
            
            attempt=$((attempt+1))
            sleep 10
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "‚ö†Ô∏è Video generation timeout after 10 minutes"
            echo "This may be expected if Runpod runner is not deployed"
          fi
