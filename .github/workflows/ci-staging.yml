name: ci-staging
on:
  push:
    branches: [ "main", "stabilize-rp-worker" ]
    paths-ignore: [ "**/*.md", ".github/ISSUE_TEMPLATE/**" ]

permissions:
  id-token: write
  contents: read

env:
  CF_ACCOUNT_ID: a3ac983a6a5ce4bb150638e1f620c2a7
  CF_ZONE_ID: 824fa72287d21dd30f97f188f650d6b7

  WORKER_NAME: alphogenai-worker
  PAGES_PROJECT_STAGING: alphogenai-app-staging
  API_HOST_STAGING: api-staging.alphogen.com  # info

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install app deps (Pages)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm ci || npm i
      - name: Build app (Pages)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm run build --if-present
      - name: Install worker deps
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm ci || npm i
      - name: Typecheck worker
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm run typecheck --if-present

  infra_deploy:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Setup Pulumi CLI
        uses: pulumi/setup-pulumi@v2
      - name: Install infra deps
        if: hashFiles('infra/**') != ''
        working-directory: infra
        run: npm ci || npm i
      - name: Build infra (ts -> js)
        if: hashFiles('infra/**') != ''
        working-directory: infra
        run: npm run build
      - name: Ensure Pulumi stack (staging)
        if: hashFiles('infra/**') != ''
        working-directory: infra
        env: { PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }} }
        run: |
          pulumi stack select staging || pulumi stack init staging
          pulumi config set cfAccountId  $CF_ACCOUNT_ID --stack staging
          pulumi config set cfZoneId     $CF_ZONE_ID    --stack staging
          pulumi config set cfR2Bucket   alphogenai-r2-staging --stack staging
      - name: Pulumi up (staging)
        if: hashFiles('infra/**') != ''
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: staging
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

  app_deploy:
    runs-on: ubuntu-latest
    needs: [ test_build, infra_deploy ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install Wrangler
        run: npm i -g wrangler
      - name: Ensure worker deps
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm ci || npm i
      - name: Deploy Worker (staging)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        env: { CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }} }
        run: |
          wrangler secret put APP_ADMIN_TOKEN --env staging <<< "${{ secrets.APP_ADMIN_TOKEN }}"
          wrangler secret put WEBHOOK_SECRET --env staging <<< "${{ secrets.WEBHOOK_SECRET }}"
          wrangler secret put RUNPOD_API_KEY --env staging <<< "${{ secrets.RUNPOD_API_KEY }}"
          wrangler secret put RUNPOD_ENDPOINT_ID --env staging <<< "${{ secrets.RUNPOD_ENDPOINT_ID }}"
          wrangler secret put SUPABASE_URL --env staging <<< "${{ secrets.SUPABASE_URL }}"
          wrangler secret put SUPABASE_SERVICE_ROLE --env staging <<< "${{ secrets.SUPABASE_SERVICE_ROLE }}"
          if [ -n "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            wrangler secret put STRIPE_SECRET_KEY --env staging <<< "${{ secrets.STRIPE_SECRET_KEY }}"
          fi
          if [ -n "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then
            wrangler secret put STRIPE_WEBHOOK_SECRET --env staging <<< "${{ secrets.STRIPE_WEBHOOK_SECRET }}"
          fi
          wrangler deploy --env staging --name "$WORKER_NAME"
      - name: Publish Pages (staging)
        if: hashFiles('app/**') != ''
        working-directory: app
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          NEXT_PUBLIC_API_BASE: https://api-staging.alphogen.com
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npx wrangler pages deploy ./out --project-name "$PAGES_PROJECT_STAGING"
