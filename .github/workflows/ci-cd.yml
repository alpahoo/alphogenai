name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - README.md
      - docs/**
      - .github/ISSUE_TEMPLATE/**
  push:
    branches: [main]
    paths-ignore:
      - README.md
      - docs/**
      - .github/ISSUE_TEMPLATE/**
  workflow_dispatch:
  release:
    types: [published]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  lint-and-typecheck:
    name: Lint & Types (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - run: npm run lint
      - run: npm run check-types

  build:
    name: Build (main)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - run: npm run build

  migrations:
    name: Apply DB Migrations (main)
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Apply Supabase migrations via Management API
        shell: bash
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          curl -sS -X POST "https://api.supabase.com/v1/projects/${SUPABASE_PROJECT_REF}/database/query" \
            -H "Authorization: Bearer ${SUPABASE_ACCESS_TOKEN}" \
            -H "apikey: ${SUPABASE_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"query":"alter table public.jobs add column if not exists progress integer default 0 not null;"}' \
            --fail-with-body

  e2e-smoke:
    name: E2E Smoke (main)
    needs: migrations
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - name: Smoke test (auth + jobs + health)
        env:
          PROD_URL: https://alphogenai.vercel.app
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          set -euo pipefail
          echo "Testing against: $PROD_URL"
          # Signup (idempotent)
          curl -s -X POST "$SUPABASE_URL/auth/v1/signup" \
            -H "apikey: $SUPABASE_ANON_KEY" \
            -H "Content-Type: application/json" \
            -d '{"email":"qa-user@mailinator.com","password":"Test1234!"}' >/dev/null || true
          # Login
          LOGIN=$(curl -s -X POST "$SUPABASE_URL/auth/v1/token?grant_type=password" \
            -H "apikey: $SUPABASE_ANON_KEY" \
            -H "Content-Type: application/json" \
            -d '{"email":"qa-user@mailinator.com","password":"Test1234!"}')
          ACCESS_TOKEN=$(echo "$LOGIN" | jq -r '.access_token // empty')
          [ -n "$ACCESS_TOKEN" ]
          # Health
          curl -sSf "$PROD_URL/api/health" >/dev/null
          # Create job
          JOB=$(curl -sSf -X POST "$PROD_URL/api/jobs" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"prompt":"CI smoke test"}')
          echo "JOB=$JOB"
          JOB_ID=$(echo "$JOB" | jq -r '.job.id // empty')
          [ -n "$JOB_ID" ]
          # Read job
          curl -sSf -H "Authorization: Bearer $ACCESS_TOKEN" "$PROD_URL/api/jobs/$JOB_ID" >/dev/null
          # Webhook (fake)
          curl -sSf -X POST "$PROD_URL/api/webhooks/runpod" \
            -H "Content-Type: application/json" \
            -H "x-webhook-secret: $WEBHOOK_SECRET" \
            -d "{\"id\":\"$JOB_ID\",\"status\":\"COMPLETED\",\"output\":{\"result_url\":\"https://example.com/result.mp4\"}}" >/dev/null
          echo "âœ… Smoke flow OK"

  e2e-full:
    name: E2E Full (release)
    needs: migrations
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - run: npm run e2e
