name: ci-cd

on:
  push:
    branches: [ "main", "prod" ]
  pull_request:
    branches: [ "main", "prod" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app deps (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm ci || npm i

      - name: Build app (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm run build --if-present

      - name: Install worker deps (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm ci || npm i

      - name: Typecheck worker (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm run typecheck --if-present

  # ===========================
  # STAGING (branch: main)
  # ===========================
  infra_deploy_staging:
    runs-on: ubuntu-latest
    needs: test_build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2

      - name: Install infra deps
        working-directory: infra
        run: npm install --no-audit --no-fund

      - name: Ensure Pulumi stack (staging)
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack select staging || pulumi stack init staging
          pulumi config set cfAccountId     ${{ vars.CF_ACCOUNT_ID }}           --stack staging
          pulumi config set cfDnsZone       ${{ vars.CF_DNS_ZONE }}             --stack staging
          pulumi config set cfPagesProject  ${{ vars.CF_PAGES_PROJECT_STAGING }} --stack staging
          pulumi config set cfWorkerName    ${{ vars.CF_WORKER_NAME_STAGING }}   --stack staging
          pulumi config set apiSubdomain    api-staging                         --stack staging

      - name: Pulumi up (staging)
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: staging
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN:     ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          CLOUDFLARE_API_TOKEN:    ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID:           ${{ vars.CF_ACCOUNT_ID }}
          CF_DNS_ZONE:             ${{ vars.CF_DNS_ZONE }}

  app_deploy_staging:
    runs-on: ubuntu-latest
    needs: infra_deploy_staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler

      # Pages
      - name: Install app deps
        working-directory: app
        run: npm ci || npm i

      - name: Build app
        working-directory: app
        run: npm run build

      # Worker
      - name: Install worker deps
        working-directory: workers
        run: npm ci || npm i

      - name: Deploy Worker (staging)
        working-directory: workers
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
        run: wrangler deploy

      - name: Publish Pages (staging)
        working-directory: app
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
        run: npx wrangler pages deploy ./out --project-name "${{ vars.CF_PAGES_PROJECT_STAGING }}"

  # ===========================
  # PROD (branch: prod)
  # ===========================
  infra_deploy_prod:
    runs-on: ubuntu-latest
    needs: test_build
    if: github.ref == 'refs/heads/prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2

      - name: Install infra deps
        working-directory: infra
        run: npm install --no-audit --no-fund

      - name: Ensure Pulumi stack (prod)
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack select prod || pulumi stack init prod
          pulumi config set cfAccountId     ${{ vars.CF_ACCOUNT_ID }}         --stack prod
          pulumi config set cfDnsZone       ${{ vars.CF_DNS_ZONE }}           --stack prod
          pulumi config set cfPagesProject  ${{ vars.CF_PAGES_PROJECT_PROD }} --stack prod
          pulumi config set cfWorkerName    ${{ vars.CF_WORKER_NAME_PROD }}   --stack prod
          pulumi config set apiSubdomain    api                               --stack prod

      - name: Pulumi up (prod)
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: prod
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN:     ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          CLOUDFLARE_API_TOKEN:    ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID:           ${{ vars.CF_ACCOUNT_ID }}
          CF_DNS_ZONE:             ${{ vars.CF_DNS_ZONE }}

  app_deploy_prod:
    runs-on: ubuntu-latest
    needs: infra_deploy_prod
    if: github.ref == 'refs/heads/prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler

      # Pages
      - name: Install app deps
        working-directory: app
        run: npm ci || npm i

      - name: Build app
        working-directory: app
        run: npm run build

      # Worker
      - name
