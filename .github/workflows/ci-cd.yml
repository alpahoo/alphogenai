name: ci-cd
on:
  push:
    branches: [ "main", "prod" ]
  pull_request:
    branches: [ "main", "prod" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  # Valeurs par défaut (peuvent être surchargées par env des jobs)
  NODE_VERSION: '20'

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION }} }

      - name: Install app deps (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm ci || npm i

      - name: Build app (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm run build --if-present

      - name: Install worker deps (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm ci || npm i

      - name: Typecheck worker (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm run typecheck --if-present

  infra_deploy:
    runs-on: ubuntu-latest
    needs: test_build
    strategy:
      matrix:
        envname: [ staging, prod ]
    if: |
      (github.ref == 'refs/heads/main'  && contains('staging', matrix.envname)) ||
      (github.ref == 'refs/heads/prod'  && contains('prod',    matrix.envname))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION }} }
      - uses: pulumi/setup-pulumi@v2

      - name: Install infra deps
        working-directory: infra
        run: npm install --no-audit --no-fund

      - name: Ensure Pulumi stack
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack select ${{ matrix.envname }} || pulumi stack init ${{ matrix.envname }}

          pulumi config set cfAccountId    ${{ vars.CF_ACCOUNT_ID }} --stack ${{ matrix.envname }}
          pulumi config set cfDnsZone      ${{ vars.CF_DNS_ZONE }}   --stack ${{ matrix.envname }}

          # Pages/Worker selon env
          if [ "${{ matrix.envname }}" = "prod" ]; then
            pulumi config set cfPagesProject  ${{ vars.CF_PAGES_PROJECT_PROD }}   --stack prod
            pulumi config set cfWorkerName    ${{ vars.CF_WORKER_NAME_PROD }}     --stack prod
            pulumi config set apiSubdomain    api                                 --stack prod
          else
            pulumi config set cfPagesProject  ${{ vars.CF_PAGES_PROJECT_STAGING }} --stack staging
            pulumi config set cfWorkerName    ${{ vars.CF_WORKER_NAME_STAGING }}   --stack staging
            pulumi config set apiSubdomain    api-staging                          --stack staging
          fi

      - name: Pulumi up
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: ${{ matrix.envname }}
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN:   ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID:         ${{ vars.CF_ACCOUNT_ID }}
          CF_DNS_ZONE:           ${{ vars.CF_DNS_ZONE }}
          # >> Les 3 ci-dessous ne sont utilisées qu'en lecture par ton code Pulumi
          CF_PAGES_PROJECT:      ${{ matrix.envname == 'prod' && vars.CF_PAGES_PROJECT_PROD || vars.CF_PAGES_PROJECT_STAGING }}
          CF_WORKER_NAME:        ${{ matrix.envname == 'prod' && vars.CF_WORKER_NAME_PROD   || vars.CF_WORKER_NAME_STAGING }}
          API_SUBDOMAIN:         ${{ matrix.envname == 'prod' && 'api'                     || 'api-staging' }}

  app_deploy:
    runs-on: ubuntu-latest
    needs: infra_deploy
    strategy:
      matrix:
        envname: [ staging, prod ]
    if: |
      (github.ref == 'refs/heads/main'  && contains('staging', matrix.envname)) ||
      (github.ref == 'refs/heads/prod'  && contains('prod',    matrix.envname))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION }} }

      - name: Install Wrangler
        run: npm i -g wrangler

      # Pages
      - name: Install app deps (for Pages)
        working-directory: app
        run: npm ci || npm i

      - name: Build app
        working-directory: app
        run: npm run build

      # Worker
      - name: Install worker deps (for Worker)
        working-directory: workers
        run: npm ci || npm i

      - name: Deploy Worker
        working-directory: workers
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
        run: wrangler deploy

      - name: Publish Pages
        working-directory: app
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
        run: |
          if [ "${{ matrix.envname }}" = "prod" ]; then
            npx wrangler pages deploy ./out --project-name "${{ vars.CF_PAGES_PROJECT_PROD }}"
          else
            npx wrangler pages deploy ./out --project-name "${{ vars.CF_PAGES_PROJECT_STAGING }}"
          fi
