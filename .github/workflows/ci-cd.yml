name: ci-cd
on:
  workflow_dispatch: {}  # on l'activera sur push après avoir créé les dossiers

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install app deps (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm ci || npm i
      - name: Build app (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        run: npm run build --if-present
      - name: Install worker deps (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm ci || npm i
      - name: Typecheck worker (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        run: npm run typecheck --if-present

  infra_deploy:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Pulumi preview (skip if folder absent)
        if: hashFiles('infra/**') != ''
        uses: pulumi/actions@v4
        with: { command: preview, stack-name: staging, work-dir: infra }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
      - name: Pulumi up (skip if folder absent)
        if: hashFiles('infra/**') != ''
        uses: pulumi/actions@v4
        with: { command: up, stack-name: staging, work-dir: infra }
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ""
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CF_DNS_ZONE: ${{ vars.CF_DNS_ZONE }}
          CF_R2_BUCKET: ${{ vars.CF_R2_BUCKET }}
          CF_WORKER_NAME: ${{ vars.CF_WORKER_NAME }}
          CF_PAGES_PROJECT: ${{ vars.CF_PAGES_PROJECT }}

  app_deploy:
    runs-on: ubuntu-latest
    needs: infra_deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install Wrangler
        run: npm i -g wrangler
      - name: Deploy Worker (skip if folder absent)
        if: hashFiles('workers/**') != ''
        working-directory: workers
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: wrangler deploy
      - name: Publish Pages (skip if folder absent)
        if: hashFiles('app/**') != ''
        working-directory: app
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          npm run build --if-present
          npx wrangler pages deploy ./out --project-name ${{ vars.CF_PAGES_PROJECT }}
