name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test_build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run check-types

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}

  apply_migrations:
    name: Apply Database Migrations
    runs-on: ubuntu-latest
    needs: test_build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply Supabase Migration
        run: |
          MIGRATION_SQL=$(cat migrations/0001_jobs.sql)
          curl -X POST "${{ secrets.SUPABASE_URL }}/rest/v1/rpc/exec" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE }}" \
            -H "Content-Type: application/json" \
            -d "{\"sql\": $(echo "$MIGRATION_SQL" | jq -Rs .)}" \
            --fail-with-body || echo "Migration execution completed with warnings"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test_build, apply_migrations]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}

      - name: Deploy to Vercel/Pages
        run: echo "Deployment step - configure based on hosting platform"

  create_then_read_test:
    name: E2E Authentication & Jobs Test
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Test Authentication Flow
        run: |
          echo "Testing signup → login → job creation → job retrieval flow"

          # Test signup
          SIGNUP_RESPONSE=$(curl -s -X POST "${{ secrets.SUPABASE_URL }}/auth/v1/signup" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"testpass123"}')

          echo "Signup response: $SIGNUP_RESPONSE"

          # Test login
          LOGIN_RESPONSE=$(curl -s -X POST "${{ secrets.SUPABASE_URL }}/auth/v1/token?grant_type=password" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"testpass123"}')

          echo "Login response: $LOGIN_RESPONSE"

          # Extract access token
          ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.access_token // empty')

          if [ -n "$ACCESS_TOKEN" ]; then
            echo "✅ Authentication successful"

            # Test job creation
            JOB_RESPONSE=$(curl -s -X POST "https://your-app-url.vercel.app/api/jobs" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{"prompt":"Test video generation"}')

            echo "Job creation response: $JOB_RESPONSE"

            # Extract job ID
            JOB_ID=$(echo "$JOB_RESPONSE" | jq -r '.job.id // empty')

            if [ -n "$JOB_ID" ]; then
              echo "✅ Job creation successful: $JOB_ID"

              # Test job retrieval
              GET_RESPONSE=$(curl -s -X GET "https://your-app-url.vercel.app/api/jobs/$JOB_ID" \
                -H "Authorization: Bearer $ACCESS_TOKEN")

              echo "Job retrieval response: $GET_RESPONSE"

              if echo "$GET_RESPONSE" | jq -e '.job' > /dev/null; then
                echo "✅ Complete flow successful: signup → login → create job → read job"
              else
                echo "❌ Job retrieval failed"
                exit 1
              fi
            else
              echo "❌ Job creation failed"
              exit 1
            fi
          else
            echo "❌ Authentication failed"
            exit 1
          fi
