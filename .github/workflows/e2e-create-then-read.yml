name: E2E Create-Then-Read Test

on:
  workflow_dispatch: {}
  push:
    branches: [main, 'devin/**']
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  create_then_read_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for deployment to be ready
        run: |
          echo "‚è≥ Waiting 30 seconds for deployment to stabilize..."
          sleep 30

      - name: Test Create-Then-Read Flow
        run: |
          echo "üß™ Testing complete create-then-read job flow..."
          
          # Generate unique test credentials
          TEST_EMAIL="e2e-create-read-$(date +%s)@example.com"
          TEST_PASSWORD="testpass123"
          
          echo "1. Testing signup..."
          SIGNUP_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST https://api.alphogen.com/api/auth/signup \
            -H "Content-Type: application/json" \
            -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}")
          
          HTTP_CODE=$(echo "$SIGNUP_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          SIGNUP_BODY=$(echo "$SIGNUP_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          if [ "$HTTP_CODE" = "201" ]; then
            echo "‚úÖ Signup successful"
            TOKEN=$(echo "$SIGNUP_BODY" | jq -r '.token')
            USER_ID=$(echo "$SIGNUP_BODY" | jq -r '.user.id')
            echo "User ID: $USER_ID"
            echo "Token: ${TOKEN:0:20}..."
          else
            echo "‚ùå Signup failed with status $HTTP_CODE"
            echo "Response: $SIGNUP_BODY"
            exit 1
          fi
          
          echo "2. Testing job creation..."
          JOB_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST https://api.alphogen.com/api/jobs \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"prompt":"E2E test job for create-then-read flow"}')
          
          JOB_HTTP_CODE=$(echo "$JOB_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          JOB_BODY=$(echo "$JOB_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          if [ "$JOB_HTTP_CODE" = "201" ]; then
            echo "‚úÖ Job creation successful"
            JOB_ID=$(echo "$JOB_BODY" | jq -r '.job.id')
            JOB_STATUS=$(echo "$JOB_BODY" | jq -r '.job.status')
            JOB_USER_ID=$(echo "$JOB_BODY" | jq -r '.job.user_id')
            echo "Job ID: $JOB_ID"
            echo "Job Status: $JOB_STATUS"
            echo "Job User ID: $JOB_USER_ID"
            
            # Verify user_id alignment
            if [ "$JOB_USER_ID" = "$USER_ID" ]; then
              echo "‚úÖ User ID alignment verified: JWT.sub = job.user_id = $USER_ID"
            else
              echo "‚ùå User ID mismatch: JWT user $USER_ID, job user $JOB_USER_ID"
              exit 1
            fi
          else
            echo "‚ùå Job creation failed with status $JOB_HTTP_CODE"
            echo "Response: $JOB_BODY"
            if echo "$JOB_BODY" | grep -q "Failed to create job"; then
              echo "‚ùå CRITICAL: Database job creation failed - check Supabase connection and FK constraints"
            fi
            exit 1
          fi
          
          echo "3. Testing immediate job retrieval..."
          GET_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X GET "https://api.alphogen.com/api/jobs/$JOB_ID" \
            -H "Authorization: Bearer $TOKEN")
          
          GET_HTTP_CODE=$(echo "$GET_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          GET_BODY=$(echo "$GET_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          if [ "$GET_HTTP_CODE" = "200" ]; then
            echo "‚úÖ Job retrieval successful"
            RETRIEVED_JOB_ID=$(echo "$GET_BODY" | jq -r '.job.id')
            RETRIEVED_STATUS=$(echo "$GET_BODY" | jq -r '.job.status')
            RETRIEVED_USER_ID=$(echo "$GET_BODY" | jq -r '.job.user_id')
            echo "Retrieved Job ID: $RETRIEVED_JOB_ID"
            echo "Retrieved Status: $RETRIEVED_STATUS"
            echo "Retrieved User ID: $RETRIEVED_USER_ID"
            
            if [ "$RETRIEVED_JOB_ID" = "$JOB_ID" ] && [ "$RETRIEVED_USER_ID" = "$USER_ID" ]; then
              echo "‚úÖ Job ID and User ID match - create-then-read flow successful!"
              echo "‚úÖ POST=201, GET=200 - persistence issue resolved!"
            else
              echo "‚ùå Data mismatch:"
              echo "  Created Job ID: $JOB_ID, Retrieved: $RETRIEVED_JOB_ID"
              echo "  Expected User ID: $USER_ID, Retrieved: $RETRIEVED_USER_ID"
              exit 1
            fi
          else
            echo "‚ùå Job retrieval failed with status $GET_HTTP_CODE"
            echo "Response: $GET_BODY"
            if echo "$GET_BODY" | grep -q "Job not found"; then
              echo "‚ùå CRITICAL: Job was created but cannot be retrieved immediately!"
              echo "‚ùå This indicates a job persistence issue in the database"
            fi
            exit 1
          fi
          
          echo "üéâ Create-then-read test completed successfully!"
          echo "üéØ Criteria met: POST=201, GET=200, no 500/404 errors"

      - name: Test Results Summary
        run: |
          echo "üéØ Create-Then-Read Test Results:"
          echo "‚úÖ User signup: Working"
          echo "‚úÖ User login: Working"  
          echo "‚úÖ Job creation: Working"
          echo "‚úÖ IMMEDIATE job retrieval: Working (NO 404!)"
          echo ""
          echo "üöÄ The job persistence issue has been resolved!"
