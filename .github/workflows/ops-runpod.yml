name: Run a generation job (no local shell)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Prompt vidÃ©o (ex: 'montagnes au lever du soleil, voix off douce')"
        required: true
        default: "ping"

permissions:
  contents: read

env:
  API_BASE: https://api.alphogen.com
  TIMEOUT_SEC: "900"    # 15 min max pour le polling
  SLEEP_SEC: "6"        # pause entre deux checks

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Check required secrets
        run: |
          miss=0
          for v in APP_ADMIN_TOKEN RUNPOD_API_KEY RUNPOD_ENDPOINT_ID; do
            if [ -z "${{ secrets[$v] }}" ]; then
              echo "::error::Missing secret: $v"
              miss=1
            fi
          done
          [ "$miss" -eq 0 ]

      - name: Create job via Worker
        id: create
        env:
          APP_ADMIN_TOKEN: ${{ secrets.APP_ADMIN_TOKEN }}
        run: |
          body=$(jq -n --arg p "${{ github.event.inputs.prompt }}" '{prompt:$p}')
          resp=$(curl -sS -X POST "$API_BASE/jobs" \
                  -H "Authorization: Bearer $APP_ADMIN_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$body" )
          echo "Worker response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::Worker /jobs returned error"
            exit 1
          fi
          id=$(echo "$resp" | jq -r '.provider_job_id // empty')
          if [ -z "$id" ]; then
            echo "::error::No provider_job_id returned by Worker"
            exit 1
          fi
          echo "job_id=$id" >> "$GITHUB_OUTPUT"

      - name: Poll RunPod status until terminal
        id: poll
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
        run: |
          id="${{ steps.create.outputs.job_id }}"
          url="https://api.runpod.ai/v2/${RUNPOD_ENDPOINT_ID}/status/${id}"

          echo "Polling RunPod status for job: $id"
          deadline=$(( $(date +%s) + ${TIMEOUT_SEC} ))
          status=""
          out="{}"

          while [ "$(date +%s)" -lt "$deadline" ]; do
            # Essai POST, fallback GET si 404
            http=$(curl -sS -o rp.json -w "%{http_code}" -X POST "$url" \
                    -H "Authorization: Bearer $RUNPOD_API_KEY" \
                    -H "Content-Type: application/json" || true)
            if [ "$http" = "404" ]; then
              http=$(curl -sS -o rp.json -w "%{http_code}" "$url" \
                      -H "Authorization: Bearer $RUNPOD_API_KEY" || true)
            fi
            echo "HTTP=$http"

            if [ "$http" -ge 400 ]; then
              echo "::warning::RunPod returned HTTP $http"; cat rp.json || true
            fi

            status=$(jq -r '.status // empty' rp.json)
            echo "status=$status"
            if [ "$status" = "COMPLETED" ] || [ "$status" = "FAILED" ] || [ "$status" = "CANCELLED" ] || [ "$status" = "TIMEOUT" ]; then
              out=$(cat rp.json)
              break
            fi

            sleep "${SLEEP_SEC}"
          done

          echo "$out" | tee runpod-result.json
          echo "status=$status" >> "$GITHUB_OUTPUT"

      - name: Upload result artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runpod-result
          path: runpod-result.json

      - name: Echo summary
        if: always()
        run: |
          echo "Job ID: ${{ steps.create.outputs.job_id }}"
          echo "Final status: ${{ steps.poll.outputs.status }}"
