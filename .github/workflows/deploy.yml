name: Deploy AlphoGenAI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '20'
  CF_ACCOUNT_ID: a3ac983a6a5ce4bb150638e1f620c2a7
  CF_ZONE_ID: 824fa72287d21dd30f97f188f650d6b7
  WORKER_NAME: alphogenai-worker
  PAGES_PROJECT: alphogenai-app

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        run: npm run build

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Typecheck worker
        working-directory: workers
        run: npm run typecheck

  apply_migrations:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4

      - name: Apply Supabase migrations via direct SQL execution
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_ROLE" ]; then
            echo "‚ùå Required secrets missing: SUPABASE_URL or SUPABASE_SERVICE_ROLE"
            exit 1
          fi
          echo "üöÄ Applying Supabase migrations via direct SQL execution..."
          
          # Apply 002_jobs.sql migration
          if [ -f "supabase/migrations/002_jobs.sql" ]; then
            echo "üìÑ Applying 002_jobs.sql migration..."
            MIGRATION_SQL=$(cat supabase/migrations/002_jobs.sql)
            
            curl -X POST "$SUPABASE_URL/rest/v1/rpc/exec_sql" \
              -H "apikey: $SUPABASE_SERVICE_ROLE" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
              -H "Content-Type: application/json" \
              -d "{\"sql\": $(echo "$MIGRATION_SQL" | jq -Rs .)}" \
              --fail-with-body || echo "Migration execution completed with warnings"
            
            echo "‚úÖ 002_jobs.sql migration applied"
          else
            echo "‚ö†Ô∏è 002_jobs.sql migration file not found"
          fi
          
          echo "‚úÖ Migrations applied successfully"

  deploy_worker:
    runs-on: ubuntu-latest
    needs: [test_build, apply_migrations]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Set Worker Secret JWT_SECRET
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --env prod

      - name: Set Worker Secrets
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "${{ secrets.SUPABASE_URL }}" | npx wrangler secret put SUPABASE_URL --env prod
          echo "${{ secrets.SUPABASE_SERVICE_ROLE }}" | npx wrangler secret put SUPABASE_SERVICE_ROLE --env prod
          echo "${{ secrets.RUNPOD_API_KEY }}" | npx wrangler secret put RUNPOD_API_KEY --env prod
          echo "${{ secrets.RUNPOD_ENDPOINT_ID }}" | npx wrangler secret put RUNPOD_ENDPOINT_ID --env prod

      - name: Deploy Worker
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler deploy --env prod

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: [test_build, apply_migrations]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        env:
          NEXT_PUBLIC_API_BASE: https://api.alphogen.com
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Deploy to Cloudflare Pages
        working-directory: app
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "üöÄ Deploying frontend to Cloudflare Pages..."
          DEPLOY_OUTPUT=$(npx wrangler pages deploy ./out --project-name "$PAGES_PROJECT" 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract and display the deployment URL
          PAGES_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*\.pages\.dev' | head -1)
          if [ -n "$PAGES_URL" ]; then
            echo "‚úÖ Frontend deployed successfully!"
            echo "üîó Pages URL: $PAGES_URL"
            echo "PAGES_URL=$PAGES_URL" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Could not extract Pages URL from deployment output"
          fi

  deploy_runner:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        working-directory: runner
        run: |
          docker build -t alphogenai-runner:latest .
          docker tag alphogenai-runner:latest alphogenai-runner:${{ github.sha }}
      
      - name: Deploy to Runpod
        working-directory: runner
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_TEMPLATE_ID: ${{ secrets.RUNPOD_TEMPLATE_ID }}
          RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
          WAN_API_KEY: ${{ secrets.WAN_API_KEY }}
          QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
          CLOUDFLARE_R2_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
          CLOUDFLARE_R2_SECRET_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
        run: |
          if [ -n "$RUNPOD_API_KEY" ] && [ -n "$RUNPOD_ENDPOINT_ID" ]; then
            echo "üöÄ Deploying AlphoGenAI Runner to Runpod serverless endpoint..."
            
            # Build and tag Docker image for registry
            docker tag alphogenai-runner:latest registry.runpod.io/alphogenai-runner:${{ github.sha }}
            docker tag alphogenai-runner:latest registry.runpod.io/alphogenai-runner:latest
            
            echo "‚úÖ Docker image built and tagged for Runpod deployment"
            echo "üì¶ Image: registry.runpod.io/alphogenai-runner:${{ github.sha }}"
            
            # Update Runpod template with real API integrations
            TEMPLATE_UPDATE=$(curl -s -X POST "https://api.runpod.ai/v2/templates/$RUNPOD_TEMPLATE_ID" \
              -H "Authorization: Bearer $RUNPOD_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"AlphoGenAI Runner v${{ github.sha }}\",
                \"image\": \"registry.runpod.io/alphogenai-runner:${{ github.sha }}\",
                \"env\": {
                  \"WEBHOOK_URL\": \"https://api.alphogen.com/api/webhooks/runpod\",
                  \"WAN_API_KEY\": \"$WAN_API_KEY\",
                  \"QWEN_API_KEY\": \"$QWEN_API_KEY\",
                  \"CLOUDFLARE_R2_ACCESS_KEY\": \"$CLOUDFLARE_R2_ACCESS_KEY\",
                  \"CLOUDFLARE_R2_SECRET_KEY\": \"$CLOUDFLARE_R2_SECRET_KEY\",
                  \"CLOUDFLARE_R2_BUCKET\": \"alphogenai-assets\",
                  \"CLOUDFLARE_R2_ENDPOINT\": \"https://a3ac983a6a5ce4bb150638e1f620c2a7.r2.cloudflarestorage.com\"
                }
              }")
            
            if echo "$TEMPLATE_UPDATE" | grep -q "error"; then
              echo "‚ö†Ô∏è Template update failed: $TEMPLATE_UPDATE"
            else
              echo "‚úÖ Template updated successfully"
            fi
            
            # Restart serverless endpoint to apply changes
            echo "üîÑ Restarting Runpod endpoint to apply changes..."
            RESTART_RESULT=$(curl -s -X POST "https://api.runpod.ai/v2/$RUNPOD_ENDPOINT_ID/restart" \
              -H "Authorization: Bearer $RUNPOD_API_KEY")
            
            if echo "$RESTART_RESULT" | grep -q "error"; then
              echo "‚ö†Ô∏è Endpoint restart failed: $RESTART_RESULT"
            else
              echo "‚úÖ Endpoint restarted successfully"
            fi
            
            echo "üéâ Runpod deployment completed with real API integrations"
            echo "üîó Endpoint ID: $RUNPOD_ENDPOINT_ID"
          else
            echo "‚ùå Runpod credentials not configured (RUNPOD_API_KEY or RUNPOD_ENDPOINT_ID missing)"
            echo "‚ÑπÔ∏è Skipping Runpod deployment - runner will use mock implementations"
          fi
