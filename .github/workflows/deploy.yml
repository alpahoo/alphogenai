name: Deploy AlphoGenAI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '20'
  CF_ACCOUNT_ID: a3ac983a6a5ce4bb150638e1f620c2a7
  CF_ZONE_ID: 824fa72287d21dd30f97f188f650d6b7
  WORKER_NAME: alphogenai-worker
  PAGES_PROJECT: alphogenai-app

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        run: npm run build

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Typecheck worker
        working-directory: workers
        run: npm run typecheck

  apply_migrations:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4

      - name: Install Supabase CLI and Apply Migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          curl -fsSL "https://github.com/supabase/cli/releases/download/v2.39.2/supabase_linux_amd64.tar.gz" -o supabase.tar.gz
          tar -xzf supabase.tar.gz
          ./supabase db execute \
            --project-ref "$SUPABASE_PROJECT_REF" \
            --access-token "$SUPABASE_ACCESS_TOKEN" \
            --file supabase/migrations/001_initial_schema.sql

  deploy_worker:
    runs-on: ubuntu-latest
    needs: [test_build, apply_migrations]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Set Worker Secret JWT_SECRET
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "${{ secrets.JWT_SECRET }}" | npx wrangler secret put JWT_SECRET --env prod

      - name: Set Worker Secrets
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "${{ secrets.SUPABASE_URL }}" | npx wrangler secret put SUPABASE_URL --env prod
          echo "${{ secrets.SUPABASE_SERVICE_ROLE }}" | npx wrangler secret put SUPABASE_SERVICE_ROLE --env prod
          echo "${{ secrets.RUNPOD_API_KEY }}" | npx wrangler secret put RUNPOD_API_KEY --env prod
          echo "${{ secrets.RUNPOD_ENDPOINT_ID }}" | npx wrangler secret put RUNPOD_ENDPOINT_ID --env prod

      - name: Deploy Worker
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler deploy --env prod

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: [test_build, apply_migrations]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        env:
          NEXT_PUBLIC_API_BASE: https://api.alphogen.com
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Deploy to Cloudflare Pages
        working-directory: app
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: npx wrangler pages deploy ./out --project-name "$PAGES_PROJECT"

  deploy_runner:
    runs-on: ubuntu-latest
    needs: test_build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        working-directory: runner
        run: |
          docker build -t alphogenai-runner:latest .
          docker tag alphogenai-runner:latest alphogenai-runner:${{ github.sha }}
      
      - name: Deploy to Runpod
        working-directory: runner
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_TEMPLATE_ID: ${{ secrets.RUNPOD_TEMPLATE_ID }}
          RUNPOD_ENDPOINT_ID: ${{ secrets.RUNPOD_ENDPOINT_ID }}
        run: |
          if [ -n "$RUNPOD_API_KEY" ] && [ -n "$RUNPOD_TEMPLATE_ID" ]; then
            echo "Deploying to Runpod serverless endpoint..."
            
            # Build and tag Docker image for registry
            docker tag alphogenai-runner:latest registry.runpod.io/alphogenai-runner:${{ github.sha }}
            docker tag alphogenai-runner:latest registry.runpod.io/alphogenai-runner:latest
            
            # Push to Runpod registry (would require authentication)
            echo "Docker image built and tagged for Runpod deployment"
            echo "Image: registry.runpod.io/alphogenai-runner:${{ github.sha }}"
            
            # Update Runpod template and restart endpoint
            curl -X POST "https://api.runpod.ai/v2/templates/$RUNPOD_TEMPLATE_ID" \
              -H "Authorization: Bearer $RUNPOD_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "AlphoGenAI Runner",
                "image": "registry.runpod.io/alphogenai-runner:${{ github.sha }}",
                "env": {
                  "WEBHOOK_URL": "https://api.alphogen.com/api/webhooks/runpod",
                  "WAN_API_KEY": "${{ secrets.WAN_API_KEY }}",
                  "QWEN_API_KEY": "${{ secrets.QWEN_API_KEY }}",
                  "CLOUDFLARE_R2_ACCESS_KEY": "${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}",
                  "CLOUDFLARE_R2_SECRET_KEY": "${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}",
                  "CLOUDFLARE_R2_BUCKET": "alphogenai-assets",
                  "CLOUDFLARE_R2_ENDPOINT": "https://a3ac983a6a5ce4bb150638e1f620c2a7.r2.cloudflarestorage.com"
                }
              }' || echo "Template update failed, continuing..."
            
            # Restart serverless endpoint if endpoint ID is provided
            if [ -n "$RUNPOD_ENDPOINT_ID" ]; then
              curl -X POST "https://api.runpod.ai/v2/$RUNPOD_ENDPOINT_ID/restart" \
                -H "Authorization: Bearer $RUNPOD_API_KEY" \
                || echo "Endpoint restart failed, continuing..."
            fi
            
            echo "Runpod deployment completed"
          else
            echo "Runpod credentials not configured, skipping deployment"
          fi
