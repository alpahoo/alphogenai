name: Deploy AlphoGenAI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '20'
  CF_ACCOUNT_ID: a3ac983a6a5ce4bb150638e1f620c2a7
  CF_ZONE_ID: 824fa72287d21dd30f97f188f650d6b7
  WORKER_NAME: alphogenai-worker
  PAGES_PROJECT: alphogenai-app

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        run: npm run build

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Typecheck worker
        working-directory: workers
        run: npm run typecheck

  deploy_worker:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler

      - name: Install worker dependencies
        working-directory: workers
        run: npm ci

      - name: Deploy Worker
        working-directory: workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler secret put JWT_SECRET --env prod <<< "${{ secrets.JWT_SECRET }}"
          wrangler secret put SUPABASE_URL --env prod <<< "${{ secrets.SUPABASE_URL }}"
          wrangler secret put SUPABASE_SERVICE_ROLE --env prod <<< "${{ secrets.SUPABASE_SERVICE_ROLE }}"
          wrangler secret put RUNPOD_API_KEY --env prod <<< "${{ secrets.RUNPOD_API_KEY }}"
          wrangler secret put RUNPOD_ENDPOINT_ID --env prod <<< "${{ secrets.RUNPOD_ENDPOINT_ID }}"
          wrangler deploy --env prod --name "$WORKER_NAME"

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: test_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install app dependencies
        working-directory: app
        run: npm ci

      - name: Build app
        working-directory: app
        env:
          NEXT_PUBLIC_API_BASE: https://api.alphogen.com
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Deploy to Cloudflare Pages
        working-directory: app
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: npx wrangler pages deploy ./out --project-name "$PAGES_PROJECT"

  deploy_runner:
    runs-on: ubuntu-latest
    needs: test_build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        working-directory: runner
        run: |
          docker build -t alphogenai-runner:latest .
          docker tag alphogenai-runner:latest alphogenai-runner:${{ github.sha }}
      
      - name: Deploy to Runpod
        working-directory: runner
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          RUNPOD_TEMPLATE_ID: ${{ secrets.RUNPOD_TEMPLATE_ID }}
        run: |
          # Create or update Runpod serverless endpoint
          if [ -n "$RUNPOD_API_KEY" ] && [ -n "$RUNPOD_TEMPLATE_ID" ]; then
            echo "Deploying to Runpod serverless endpoint..."
            # This would typically involve:
            # 1. Push Docker image to registry
            # 2. Update Runpod template with new image
            # 3. Restart serverless endpoint
            echo "Runpod deployment configured but requires real API integration"
          else
            echo "Runpod credentials not configured, skipping deployment"
          fi
