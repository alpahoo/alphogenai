name: API Smoke Tests

on:
  workflow_dispatch:
  push:
    branches: [main, stabilize-rp-worker]

permissions:
  contents: read

env:
  API_BASE: https://api.alphogen.com

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Check available secrets
        run: |
          echo "Checking available secrets for adaptive testing..."
          if [ -n "${{ secrets.APP_ADMIN_TOKEN }}" ]; then
            echo "✓ APP_ADMIN_TOKEN available"
          else
            echo "⚠ APP_ADMIN_TOKEN missing - will skip auth-required tests"
          fi
          if [ -n "${{ secrets.WEBHOOK_SECRET }}" ]; then
            echo "✓ WEBHOOK_SECRET available"
          else
            echo "⚠ WEBHOOK_SECRET missing - will skip webhook tests"
          fi
          if [ -n "${{ secrets.RUNPOD_API_KEY }}" ] && [ -n "${{ secrets.RUNPOD_ENDPOINT_ID }}" ]; then
            echo "✓ RUNPOD secrets available"
          else
            echo "⚠ RUNPOD secrets missing - will expect noop responses"
          fi

      - name: Test GET /health
        run: |
          resp=$(curl -sS "$API_BASE/health")
          echo "Health response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::/health endpoint failed"
            exit 1
          fi

      - name: Test POST /webhooks/test
        env:
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          if [ -z "$WEBHOOK_SECRET" ]; then
            echo "⚠ Skipping webhook test - WEBHOOK_SECRET not available"
            exit 0
          fi
          resp=$(curl -sS -X POST "$API_BASE/webhooks/test" \
                  -H "X-Webhook-Secret: $WEBHOOK_SECRET" \
                  -H "Content-Type: application/json" \
                  --data '{"test": true}')
          echo "Webhook response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::/webhooks/test endpoint failed"
            exit 1
          fi

      - name: Test PUT/GET /assets
        env:
          APP_ADMIN_TOKEN: ${{ secrets.APP_ADMIN_TOKEN }}
        run: |
          if [ -z "$APP_ADMIN_TOKEN" ]; then
            echo "⚠ Skipping assets test - APP_ADMIN_TOKEN not available"
            exit 0
          fi
          # PUT asset
          resp=$(curl -sS -X PUT "$API_BASE/assets/hello.txt" \
                  -H "Authorization: Bearer $APP_ADMIN_TOKEN" \
                  -H "Content-Type: text/plain" \
                  --data "Hello World Test")
          echo "PUT asset response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::PUT /assets failed"
            exit 1
          fi
          
          # GET asset
          content=$(curl -sS "$API_BASE/assets/hello.txt")
          echo "GET asset content: $content"
          if [ "$content" != "Hello World Test" ]; then
            echo "::error::GET /assets content mismatch"
            exit 1
          fi

      - name: Test POST /jobs
        id: create_job
        env:
          APP_ADMIN_TOKEN: ${{ secrets.APP_ADMIN_TOKEN }}
        run: |
          if [ -z "$APP_ADMIN_TOKEN" ]; then
            echo "⚠ Skipping jobs test - APP_ADMIN_TOKEN not available"
            echo "job_id=skip" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          resp=$(curl -sS -X POST "$API_BASE/jobs" \
                  -H "Authorization: Bearer $APP_ADMIN_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data '{"prompt": "smoke test video"}')
          echo "POST jobs response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::POST /jobs failed"
            exit 1
          fi
          provider=$(echo "$resp" | jq -r '.provider // empty')
          if [ "$provider" = "noop" ]; then
            echo "✓ POST /jobs returned noop response (RunPod secrets not configured)"
            echo "job_id=noop" >> "$GITHUB_OUTPUT"
          else
            job_id=$(echo "$resp" | jq -r '.provider_job_id // empty')
            if [ -z "$job_id" ]; then
              echo "::error::No provider_job_id returned"
              exit 1
            fi
            echo "job_id=$job_id" >> "$GITHUB_OUTPUT"
          fi

      - name: Test GET /jobs/:id (Runpod proxy)
        env:
          APP_ADMIN_TOKEN: ${{ secrets.APP_ADMIN_TOKEN }}
        run: |
          job_id="${{ steps.create_job.outputs.job_id }}"
          if [ "$job_id" = "skip" ] || [ "$job_id" = "noop" ]; then
            echo "⚠ Skipping job status test - no real job created"
            exit 0
          fi
          resp=$(curl -sS "$API_BASE/jobs/$job_id" \
                  -H "Authorization: Bearer $APP_ADMIN_TOKEN")
          echo "GET jobs status response: $resp"
          
          # Check no supabase_not_configured error
          if echo "$resp" | grep -q "supabase_not_configured"; then
            echo "::error::GET /jobs/:id still returns supabase_not_configured"
            exit 1
          fi
          
          # Check it's a valid response with Runpod data
          ok=$(echo "$resp" | jq -r '.ok // empty')
          provider=$(echo "$resp" | jq -r '.provider // empty')
          if [ "$ok" != "true" ] || [ "$provider" != "runpod" ]; then
            echo "::error::GET /jobs/:id invalid response format"
            exit 1
          fi

      - name: Test GET /me (Supabase integration)
        env:
          APP_ADMIN_TOKEN: ${{ secrets.APP_ADMIN_TOKEN }}
        run: |
          if [ -z "$APP_ADMIN_TOKEN" ]; then
            echo "⚠ Skipping /me test - APP_ADMIN_TOKEN not available"
            exit 0
          fi
          resp=$(curl -sS "$API_BASE/me" \
                  -H "Authorization: Bearer $APP_ADMIN_TOKEN")
          echo "GET /me response: $resp"
          ok=$(echo "$resp" | jq -r '.ok // empty')
          if [ "$ok" != "true" ]; then
            echo "::error::GET /me endpoint failed"
            exit 1
          fi
          
          echo "✅ All smoke tests passed!"
# Trigger smoke test with GitHub secrets
# Added comment to trigger new workflow run - Thu Sep  4 17:31:56 UTC 2025
